# -*- encoding: utf-8 -*-
# Copyright 2012 Citrix Systems, Inc. Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.  Citrix Systems, Inc.
# reserves all rights not expressly granted by the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Automatically generated by addcopyright.py at 04/03/2012
""" Tests for customer defects
"""

import marvin
from integration.lib.base import *
from integration.lib.utils import *
from integration.lib.common import *

#Import Local Modules
from marvin.cloudstackTestCase import *
from marvin.cloudstackAPI import *
from marvin import remoteSSHClient

class Services:
    """Test Services for customer defects
    """

    def __init__(self):
        self.services = {
                        "account": {
                                    "email": "test@test.com",
                                    "firstname": "Test",
                                    "lastname": "User",
                                    "username": "test",
                                    # Random characters are appended for unique
                                    # username
                                    "password": "fr3sca",
                         },
                         "service_offering": {
                                    "name": "Tiny Instance",
                                    "displaytext": "Tiny Instance",
                                    "cpunumber": 1,
                                    "cpuspeed": 100, # in MHz
                                    "memory": 64, # In MBs
                        },
                        "disk_offering": {
                                    "displaytext": "Small",
                                    "name": "Small",
                                    "disksize": 1
                        },
                        "virtual_machine": {
                                    "displayname": "Test VM",
                                    "username": "root",
                                    "password": "password",
                                    "ssh_port": 22,
                                    "hypervisor": 'XenServer',
                                    "privateport": 22,
                                    "publicport": 22,
                                    "protocol": 'TCP',
                        },
                        "volume": {
                                   "diskname": "APP Data Volume",
                                   "size": 1, # in GBs
                                   "diskdevice": "/dev/xvdb", # Data Disk
                        },
                        "templates": {
                                    "displaytext": 'Template from snapshot',
                                    "name": 'Template from snapshot',
                                    "ostypeid": '144f66aa-7f74-4cfe-9799-80cc21439cb3',
                                    "templatefilter": 'self',
                                    "url": "http://download.cloud.com/releases/2.0.0/UbuntuServer-10-04-64bit.vhd.bz2",
                                    "hypervisor": 'XenServer',
                                    "format" : 'VHD',
                                    "isfeatured": True,
                                    "ispublic": True,
                                    "isextractable": True,
                                    "passwordenabled":True,
                        },
                        "static_nat": {
                                    "startport": 22,
                                    "endport": 22,
                                    "protocol": "TCP"
                        },
                        "ostypeid": '144f66aa-7f74-4cfe-9799-80cc21439cb3',
                        # Cent OS 5.3 (64 bit)                        
                        "sleep":60,
                        "mode": 'advanced',
                        # Networking mode, Advanced, Basic
                     }


class TestOfferings(cloudstackTestCase):

    @classmethod
    def setUpClass(cls):
        cls.api_client = super(
                               TestOfferings,
                               cls
                               ).getClsTestClient().getApiClient()
        cls.services = Services().services
        # Get Zone, Domain and templates
        cls.domain = get_domain(cls.api_client, cls.services)
        cls.zone = get_zone(cls.api_client, cls.services)
        cls.template = get_template(
                            cls.api_client,
                            cls.zone.id,
                            cls.services["ostypeid"]
                            )

        cls.services["template"] = cls.template.id
        cls.services["zoneid"] = cls.zone.id

        # Create admin, user acoounts etc
        cls.admin = Account.create(
                            cls.api_client,
                            cls.services["account"],
                            admin=True,
                            domainid=cls.domain.id
                            )

        cls.user = Account.create(
                            cls.api_client,
                            cls.services["account"],
                            domainid=cls.domain.id
                            )

        cls.services["account"] = cls.account.account.name

        cls.service_offering = ServiceOffering.create(
                                            cls.api_client,
                                            cls.services["service_offering"]
                                            )
        cls._cleanup = [
                        cls.account,
                        cls.user
                        ]
        return

    @classmethod
    def tearDownClass(cls):
        try:
            #Cleanup resources used
            cleanup_resources(cls.api_client, cls._cleanup)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return

    def setUp(self):
        self.apiclient = self.testClient.getApiClient()
        self.dbclient = self.testClient.getDbConnection()
        self.cleanup = []
        return

    def tearDown(self):
        try:
            #Clean up, terminate the created instance, volumes and snapshots
            cleanup_resources(self.apiclient, self.cleanup)
        except Exception as e:
            raise Exception("Warning: Exception during cleanup : %s" % e)
        return

    def test_listServiceOfferingsNotSystem(self):
        """Test listServiceOfferings api response for console/system service offerings
        """

        # Validate the following
        # 1. as admin listServiceOfferings
        # 2. as domain admin listserviceofferings
        # 3. as user listserviceofferings
        # 4. listServiceOfferings should not return service offerings for
        #    system VMs

        # List service offerings as a admin
        self.debug(
                "Fetching service offerings for admin user"
                )
        service_offerings = ServiceOffering.list(
                                                 self.apiclient,
                                                 domainid=self.domain.id
                                                 )
        self.assertEqual(
                    isinstance(service_offerings, list),
                    True,
                    "List service offerings should return a valid response"
                    )
        self.debug(
                "Checking if list service offering returns a system offering")
        for service_offering in service_offerings:
            self.debug("Service offering: %s, Is system: %s" % (
                                                service_offering.name,
                                                service_offering.issystem
                                                ))
            self.assertNotEqual(
                    service_offering.issystem,
                    True,
                    "List service offerings shall not return system offerings"
                    )

        # List service offerings as an user
        self.debug(
                "Fetching service offerings for normal user"
                )
        service_offerings = ServiceOffering.list(
                                            self.apiclient,
                                            account=self.user.account.name,
                                            domainid=self.domain.id
                                            )
        self.assertEqual(
                    isinstance(service_offerings, list),
                    True,
                    "List service offerings should return a valid response"
                    )
        self.debug(
                "Checking if list service offering returns a system offering")

        for service_offering in service_offerings:
            self.debug("Service offering: %s, Is system: %s" % (
                                                service_offering.name,
                                                service_offering.issystem
                                                ))
            self.assertNotEqual(
                    service_offering.issystem,
                    True,
                    "List service offerings shall not return system offerings"
                    )
        return
